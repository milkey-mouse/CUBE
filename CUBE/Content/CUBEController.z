class CUBEController : ZilchComponent
{
    var Paused : Boolean = true;
    
    var JumpsLeft : Integer = 0;
    
    var RotationSpeed : Integer = 175;
    
    var JumpForce : Real = 5;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
    }
    
    function OnCollisionStarted(event : CollisionEvent)
    {
        if(this.Paused)
        {
            var group : ActionSet = this.Owner.Actions; //Action.Group();
            Action.Delay(group, 1.0);
            Action.Call(group, this.RemoveLock);
        }
        if(event.FirstPoint.WorldNormalTowardsOther.Y < -0.7)
        {
            this.JumpsLeft = 2;
        }
    }
    
    function RemoveLock()
    {
        this.Paused = false;
        var camera : Cog = this.Space.FindObjectByName("Camera");
        if(camera.LerpTowardsTarget != null)
        {
            camera.LerpTowardsTarget.Tracking = true;
        }
    }
    
    function Kill()
    {
        this.Space.TimeSpace.Paused = true;
        var gos : Space = this.GameSession.CreateNamedSpace("GameOver", Archetype.Space);
        gos.LoadLevel(Level.GameOver);
        gos.FindObjectByName("CubeCaption").GameOverHandler.MainSpace = this.Space;
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        if(this.Paused)
        {
            return;
        }
        if(this.Owner.Orientation.WorldForward.Y > 0.9 || this.Owner.Orientation.WorldForward.Y < -0.9)
        {
            this.Owner.Transform.RotateAnglesWorld(Real3(Math.Pi / 2, 0, 0));
        }
        if(this.Owner.Transform.WorldTranslation.Y < -10)
        {
            this.Kill();
        }
        if(this.JumpsLeft > 0 && Zero.Keyboard.KeyIsPressed(Keys.Space))
        {
            this.Owner.RigidBody.ApplyLinearVelocity(Real3(0,this.JumpForce-this.Owner.RigidBody.Velocity.Y,0));
            --this.JumpsLeft;
        }
        if(Zero.Keyboard.KeyIsDown(Keys.A) && !Zero.Keyboard.KeyIsDown(Keys.D))
        {
            this.Owner.RigidBody.ApplyAngularVelocity(Real3(this.Owner.RigidBody.AngularVelocity.X, event.Dt * this.RotationSpeed, this.Owner.RigidBody.AngularVelocity.Z) - this.Owner.RigidBody.AngularVelocity);
        }   
        else if(Zero.Keyboard.KeyIsDown(Keys.D) && !Zero.Keyboard.KeyIsDown(Keys.A))
        {
            this.Owner.RigidBody.ApplyAngularVelocity(Real3(this.Owner.RigidBody.AngularVelocity.X, -event.Dt * this.RotationSpeed, this.Owner.RigidBody.AngularVelocity.Z) - this.Owner.RigidBody.AngularVelocity);
        }
        else
        {
            this.Owner.RigidBody.AngularVelocity = Real3(this.Owner.RigidBody.AngularVelocity.X,0,this.Owner.RigidBody.AngularVelocity.Z);
        }
        var angle : Real = this.Owner.Orientation.AbsoluteAngle;
        if(Zero.Keyboard.KeyIsDown(Keys.W) && !Zero.Keyboard.KeyIsDown(Keys.S))
        {
            this.Owner.RigidBody.ApplyLinearVelocity(-Real3(Math.Sin(angle) * event.Dt * 500, -this.Owner.RigidBody.Velocity.Y, Math.Cos(angle) * event.Dt * 500) - this.Owner.RigidBody.Velocity);
        }
        else if(Zero.Keyboard.KeyIsDown(Keys.S) && !Zero.Keyboard.KeyIsDown(Keys.W))
        {
            this.Owner.RigidBody.ApplyLinearVelocity(Real3(Math.Sin(angle) * event.Dt * 500, this.Owner.RigidBody.Velocity.Y, Math.Cos(angle) * event.Dt * 500) - this.Owner.RigidBody.Velocity);
        }
        else
        {
            this.Owner.RigidBody.Velocity = Real3(0,this.Owner.RigidBody.Velocity.Y,0);
        }
    }
}
