class CUBEController : ZilchComponent
{
    [Property]
    var DrawCoords : Boolean = false;
    
    var Paused : Boolean = true;
    
    var JumpsLeft : Integer = 0;
    
    var RotationSpeed : Integer = 150;
    
    var JumpForce : Real = 5;
    
    var JumpAligned : Boolean = true;
    
    var SuperJump : Boolean = false;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
    }
    
    function OnCollisionStarted(event : CollisionEvent)
    {
        if(this.Paused)
        {
            var group : ActionSet = this.Owner.Actions;
            Action.Delay(group, 1.0);
            Action.Call(group, this.RemoveLock);
        }
        if(event.FirstPoint.WorldNormalTowardsOther.Y < -0.7)
        {
            this.JumpsLeft = 2;
            this.JumpAligned = true;
        }
    }
    
    function RemoveLock()
    {
        this.Paused = false;
        var camera : Cog = this.Space.FindObjectByName("Camera");
        if(camera.LerpTowardsTarget != null)
        {
            camera.LerpTowardsTarget.Tracking = true;
        }
        this.Owner.Orientation.LookAtDirection(Real3(0, 0, 1));
    }
    
    function ActivateSuperJump(pos : Real3) {
        if (!this.SuperJump) {
            this.SuperJump = true;
            var sjo : Cog = this.Space.CreateAtPosition(Archetype.SuperJumpOverlay, pos);

            // make overlay on first person mode
            var cam = this.LevelSettings.CameraViewport.Camera;
            if (cam.LerpTowardsTarget.FirstPerson && cam.LerpTowardsTarget.FinishedAnimation && this.GameSession.FindSpaceByName("SuperJumpOverlay") == null) {
                this.GameSession.CreateNamedSpace("SuperJumpOverlay", Archetype.Space).LoadLevel(Level.FirstPersonSuperJumpOverlay);
            }
        }
    }
    
    function Kill()
    {
        if (!this.Space.TimeSpace.Paused) {
            this.Space.TimeSpace.Paused = true;
            var gos : Space = this.GameSession.CreateNamedSpace("GameOver", Archetype.Space);
            gos.LoadLevel(Level.GameOver);
        }
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        
        if(this.Paused)
        {
            return;
        }
        if (this.JumpAligned) {
            if (this.Owner.Orientation.WorldForward.Y < -0.95) {
                this.Owner.Orientation.LookAtDirection(this.Owner.Orientation.WorldUp);
            } else if (this.Owner.Orientation.WorldForward.Y > 0.95) {
                this.Owner.Orientation.LookAtDirection(-this.Owner.Orientation.WorldUp);
            }
            if (this.Owner.Orientation.WorldUp.Y < 0.05) {
                if (this.Owner.Orientation.WorldRight.Y > 0) {
                    this.Owner.Orientation.LookAtDirectionWithUp(this.Owner.Orientation.WorldForward, this.Owner.Orientation.WorldRight);
                } else {
                    this.Owner.Orientation.LookAtDirectionWithUp(this.Owner.Orientation.WorldForward, -this.Owner.Orientation.WorldRight);
                }
            }
        }
        if (this.DrawCoords) {
            var forward = new DebugLine();
            forward.Width(2);
            forward.Float4Color(Real4(1, 0, 0, 1));
            forward.Start(this.Owner.Transform.Translation);
            forward.End(this.Owner.Transform.Translation + this.Owner.Orientation.WorldForward * 5);
            forward.Draw();
            var up = new DebugLine();
            up.Width(2);
            up.Float4Color(Real4(0, 0, 1, 1));
            up.Start(this.Owner.Transform.Translation);
            up.End(this.Owner.Transform.Translation + this.Owner.Orientation.WorldUp * 5);
            up.Draw();
            var right = new DebugLine();
            right.Width(2);
            right.Float4Color(Real4(0, 1, 0, 1));
            right.Start(this.Owner.Transform.Translation);
            right.End(this.Owner.Transform.Translation + this.Owner.Orientation.WorldRight * 5);
            right.Draw();
        }
        if(this.Owner.Transform.WorldTranslation.Y < -10)
        {
            this.Kill();
        }
        if (Zero.Keyboard.KeyIsPressed(Keys.V)) {
            var camera : Cog = this.Space.LevelSettings.CameraViewport.Camera;
            camera.LerpTowardsTarget.FirstPerson = !camera.LerpTowardsTarget.FirstPerson;
            camera.LerpTowardsTarget.FinishedAnimation = false;
        }
        if((this.JumpsLeft > 0 || this.SuperJump) && Zero.Keyboard.KeyIsPressed(Keys.Space))
        {
            if (this.SuperJump) {
                this.Owner.RigidBody.ApplyLinearVelocity(Real3(0,(this.JumpForce*3)-this.Owner.RigidBody.Velocity.Y,0));
                if (this.Owner.Children.Current.Children.IsNotEmpty) {
                    var sphere = this.Owner.Children.Current.Children.Current;
                    var seq = Action.Sequence(this.Owner.Actions);
                    Action.Call(seq, sphere.DetachRelative);
                    Action.Property(seq, @sphere.Transform.Scale, Real3(0, 0, 0), 0.25, Ease.Linear);
                    Action.Call(seq, sphere.Destroy);
                }
                this.SuperJump = false;
                if (this.GameSession.FindSpaceByName("SuperJumpOverlay") != null) {
                    this.GameSession.FindSpaceByName("SuperJumpOverlay").Destroy();
                }
            } else {
                this.Owner.RigidBody.ApplyLinearVelocity(Real3(0,this.JumpForce-this.Owner.RigidBody.Velocity.Y,0));
            }
            this.JumpAligned = false;
            --this.JumpsLeft;
        }
        if(Zero.Keyboard.KeyIsDown(Keys.A) && !Zero.Keyboard.KeyIsDown(Keys.D))
        {
            this.Owner.RigidBody.ApplyAngularVelocity(Real3(this.Owner.RigidBody.AngularVelocity.X, event.Dt * this.RotationSpeed, this.Owner.RigidBody.AngularVelocity.Z) - this.Owner.RigidBody.AngularVelocity);
        }
        else if(Zero.Keyboard.KeyIsDown(Keys.D) && !Zero.Keyboard.KeyIsDown(Keys.A))
        {
            this.Owner.RigidBody.ApplyAngularVelocity(Real3(this.Owner.RigidBody.AngularVelocity.X, -event.Dt * this.RotationSpeed, this.Owner.RigidBody.AngularVelocity.Z) - this.Owner.RigidBody.AngularVelocity);
        }
        else
        {
            this.Owner.RigidBody.AngularVelocity = Real3(this.Owner.RigidBody.AngularVelocity.X,0,this.Owner.RigidBody.AngularVelocity.Z);
        }
        var angle : Real = this.Owner.Orientation.AbsoluteAngle;
        if(Zero.Keyboard.KeyIsDown(Keys.W) && !Zero.Keyboard.KeyIsDown(Keys.S))
        {
            this.Owner.RigidBody.ApplyLinearVelocity(Real3(-this.Owner.Orientation.WorldForward.X * event.Dt * 500,
                                                           this.Owner.RigidBody.Velocity.Y,
                                                           -this.Owner.Orientation.WorldForward.Z * event.Dt * 500) - this.Owner.RigidBody.Velocity);
        }
        else if(Zero.Keyboard.KeyIsDown(Keys.S) && !Zero.Keyboard.KeyIsDown(Keys.W))
        {
            this.Owner.RigidBody.ApplyLinearVelocity(Real3(this.Owner.Orientation.WorldForward.X * event.Dt * 500,
                                                           this.Owner.RigidBody.Velocity.Y,
                                                           this.Owner.Orientation.WorldForward.Z * event.Dt * 500) - this.Owner.RigidBody.Velocity);
        }
        else
        {
            this.Owner.RigidBody.Velocity = Real3(this.Owner.RigidBody.Velocity.X * 0.9,
                                                  this.Owner.RigidBody.Velocity.Y,
                                                  this.Owner.RigidBody.Velocity.Z * 0.9);
        }
        if(!this.JumpAligned && Zero.Keyboard.KeyIsDown(Keys.Space)) {
            var newUp : Real3 = Math.Normalize(this.Owner.Orientation.WorldUp + Real3(0, event.Dt * 5, 0));
            var newForward : Real3 = this.Owner.Orientation.WorldForward;
            this.JumpAligned = true;
            if (Math.Abs(this.Owner.Orientation.WorldUp.Z) < 0.025) {
                this.Owner.RigidBody.AngularVelocity = Real3(0, this.Owner.RigidBody.AngularVelocity.Y, this.Owner.RigidBody.AngularVelocity.Z);
            } else {
                this.JumpAligned = false;
            }
            if (Math.Abs(this.Owner.Orientation.WorldUp.X) < 0.025) {
                this.Owner.RigidBody.AngularVelocity = Real3(this.Owner.RigidBody.AngularVelocity.X, this.Owner.RigidBody.AngularVelocity.Y, 0);
            } else {
                newForward = Real3(newForward.X, newForward.Y - (newForward.Y * event.Dt * 10), newForward.Z);
                this.JumpAligned = false;
            }
            if (!this.JumpAligned) {
                this.Owner.Orientation.LookAtDirectionWithUp(newForward, newUp);
            }
        }
    }
}
