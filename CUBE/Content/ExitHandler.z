class ExitHandler : ZilchComponent
{
    var RandRotate : Real3 = Real3(0,0,0);
    
    var Rand : Random = Random();
    
    var Cube : Cog = null;
    
    var Camera : Cog = null;
    
    var CubeCountdown : Real = 1.18;
    
    var StartColors : Real4 = Real4.Zero;
    
    var MadeSpace : Boolean = false;
    
    [Property]
    var NextLevel : Level = null;
    
    var Renderer : Renderer;
    
    function Initialize(init : CogInitializer)
    {
        this.RefreshRenderer();
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
        this.StartColors = this.Renderer.ClearColor;
        this.Cube = this.Space.FindObjectByName("CUBE");
        foreach(var obj : Cog in this.Space.AllObjects())
        {
            if(obj.LerpTowardsTarget != null)
            {
                this.Camera = obj;
            }
        }
    }
    
    function RefreshRenderer() {
         if (this.LevelSettings.ForwardRenderer != null) {
             this.Renderer = this.LevelSettings.ForwardRenderer;
         } else {
             this.Renderer = this.LevelSettings.DeferredRenderer;
         }
    }
    
    function AlignCamera()
    {
        var direction : Real3 = this.Camera.Transform.WorldTranslation - this.Cube.Transform.WorldTranslation;
        this.Camera.Orientation.LookAtDirection(direction);
    }
    
    function OnCollisionStarted(event : CollisionEvent)
    {
        if(event.OtherObject.Name == "CUBE")
        {
            if(this.Space.FindAllObjectsByName("Diamond").IsNotEmpty)
            {
                this.Space.SoundSpace.PlayCue(SoundCue.DiamondError);
                var targetPos : Real3 = this.Owner.Transform.WorldTranslation + Real3(0, 0, 5.5);
                var offset : Real3 = targetPos - event.OtherObject.Transform.WorldTranslation;
                offset = Math.Normalize(offset) * 50;
                event.OtherObject.RigidBody.ApplyLinearVelocity(offset);
            }
            else
            {
                SoundCue.CUBEAnthem.Volume = 3;
                this.Space.SoundSpace.PlayCue(SoundCue.CUBEAnthem);
                this.Camera.RemoveComponentByName("LerpTowardsTarget");
                this.Camera.AddComponentByName("Orientation");
                this.Camera.AttachTo(this.Owner);
                this.Camera.Transform.Translation = Real3(0, -17.5, 65);
                this.Camera.Camera.FieldOfView = 25;
                this.AlignCamera();
                this.Cube.CUBEController.Paused = true;
                this.Cube.RigidBody.DynamicState = RigidBodyDynamicState.Kinematic;
                this.RandRotate = this.Rand.Real3(4,4);
                Zero.Disconnect(this.Owner, Events.CollisionStarted, this);
                Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
            }
        }
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {
        this.Cube.CUBEController.Paused = true;
        this.Cube.Transform.RotateAnglesWorld(this.RandRotate * event.Dt);
        this.Cube.Transform.Translation += Real3(0,event.Dt*17.5,0);
        this.AlignCamera();
        this.CubeCountdown -= event.Dt;
        if(this.CubeCountdown <= 0)
        {
            if(!this.MadeSpace)
            {
                var nlspace : Space = this.GameSession.CreateNamedSpace("NextLevelMenu", Archetype.Space);
                nlspace.LoadLevel(Level.NextLevel);
                var bln : String = this.NextLevel.Name.Replace("Level", "").ToUpper();
                var sb : Cog = nlspace.FindObjectByName("StartButton");
                var sbtext : String = "ENTER LEVEL `bln`";
                sb.SpriteText.Text = sbtext;
                sb.ChangeLevelButton.LevelToLoad = this.NextLevel;
                var tpd : Cog = sb.Children.Current;
                tpd.Area.Size = Real2((sb.SpriteText.MeasureGivenText(sbtext).X + 1) / 2, tpd.Area.Size.Y);
                this.MadeSpace = true;
            }
            if(this.Renderer.ClearColor != Real4(0,0,0,0))
            {
                var mult : Real = Math.Min(1.0, -this.CubeCountdown);
                var ccolor : Real4 = this.StartColors - (this.StartColors * mult);
                this.Renderer.ClearColor = ccolor;
            }
            else
            {
                Zero.Disconnect(this.Owner, Events.LogicUpdate, this);
            }
        }
    }
}